@model IEnumerable<Plaboo.Models.RecyclingCentre>




<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/css/bootstrap.min.css" integrity="sha384-y3tfxAZXuh4HwSYylfB+J125MxIs6mR5FOHamPBG064zB+AFeWH94NdvaCBm8qnd" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

    <style>
        .navbar {
            background-color: white !important;
        }

        .hero-image {
            background-image: url('../../Content/Images/suburb7.jpg');
            height: 50%;
            background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
            position: relative;
            width: 100%;
        }

        /*below are the css for the modal dialog box which is being shown when the user does not enter a valid postcode*/
        .modal.fade .modal-dialog {
            opacity: 0;
            -webkit-transition: all 0.5s ease-in-out;
            transition: all 0.5s;
            transform: scale(0) rotate(500deg);
        }

        .modal.fade.in .modal-dialog {
            opacity: 1;
            transform: scale(1) rotate(0deg);
        }

        .modal-backdrop {
            background-color: gray;
        }

        .modal-header {
            background-color: azure;
            color: white;
        }

        .modal-body {
            background-color: azure;
            color: white;
        }

        .modal-footer {
            background-color: azure;
            color: white;
        }

        .mcontent {
            color: black;
            font-family: 'Comic Sans MS';
        }

        /*media query to introduce responsiveness in the mobile phones*/
        @@media only screen and (min-device-width: 320px) and (max-device-width: 568px) and (-webkit-min-device-pixel-ratio: 2) {
        }



        .row {
            margin-left: 15px;
            margin-right: 15px;
            margin-top: 15px
        }

        .card {
            margin-left: 15px;
            margin-right: 15px;
            margin-top: 20px
        }

        @@media only screen and (min-width: 600px) and (max-width: 1200px) {
            /* For tablets: */
            .pad {
                margin-left: 7%
            }
        }
    </style>
</head>


<body>
    @using (Html.BeginForm("Index", "RecyclingCentres", FormMethod.Post))
    {
        <div class="content">
            <div class="hero-image responsive" style="height: 460px;margin-bottom:30px;">
                <div class="hero-text" style="text-align: center;transform: translate(-50%, -50%);position: absolute;left: 50%;top: 50%;">
                    <h2 style="color:white; font-family: Calibri">
                        Enter your suburb and  know <br /> the Recyling Centres near you.
                    </h2>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="col-md-6">
                                @*textbox to let the user enter their postcode*@
                                <input style="width: 220px; margin-right: 20px; height: 40px;" class="form-control" id="suburb"
                                       aria-describedby="emailHelp" name="suburb" placeholder="Enter suburb">
                            </div>
                            <div class="col-md-6" style="margin-top:2px;">


                                @*<a id="search" class="btn btn-primary">
                                        <i class="fa fa-cog fa-spin"></i>
                                        Search
                                    </a>*@
                                <input type="submit" value="Search" id="search" class="btn btn-primary" />
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    }

    @*<div id="map" style="height:500px;"></div>*@
    @*below is the code to show the modal panel popup when the user does not enter a postcode in melbourne*@

    @if (Model.Count() < 2)
    {
        <div class="card">
            <div class="row">
                <div class="text-center">
                    <h2>These are the recycling centers near you</h2>
                </div>
            </div>
            <div class="row">

                <div class="col-lg-8">
                    <div id="map" style="width: 100%; height: 400px;"></div>
                </div>
                <div class="col-lg-4 pre-scrollable" style="height:400px">

                    @foreach (var result in Model)
                    {
                        <div class="row">
                            <p>@result.Name</p>
                            <p>@result.Address</p>
                            <a class="button" href="https://www.google.com/maps/search/?api=1&query=@result.Address" target="_blank">Get Directions</a>
                            <hr />
                        </div>
                    }

                </div>
                
            </div>
        </div>
    }








        <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
             aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" id="resizemodal" role="document">
                <div class="modal-content">
                    <div class="modal-header">

                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p class="mcontent" id="popupcontent">Please enter a suburb in Melbourne!</p>
                    </div>
                </div>
            </div>
        </div>
    </body>



<script>

    var availableTags = [];

    var model = @Html.Raw(Json.Encode(Model));
          
    var array = @Html.Raw(Json.Encode(@ViewBag.availabletags));
    for (var i = 0; i < array.length; i++) {
        debugger;
        availableTags.push(array[i]);
        }

    $("#suburb").autocomplete({
        source: availableTags
       
    });


    var locations = [];
        //this is to call the modal popup when invalid postcode is inputted
         function alignModal() {
           var modalDialog = $("#resizemodal");
            /* Applying the top margin on modal dialog to align it vertically center */
            modalDialog.css("margin-top", Math.max(0, ($(window).height() - modalDialog.height()) / 3.5));


        }


    if (model.length < 2)
    {
        debugger;
        var model2 = @Html.Raw(Json.Encode(Model));
        var a = 3;
         locations = [];
          //for each postcode existing in the database, check if the postcode is valid and retreive the associated council
           for (var item in model2)
           {


                    var point = {
                            "latitude": model2[item].Latitude,
                            "longitude": model2[item].Longitude,
                            "description": model2[item].Name
                        };
                        // Push them all into an array.
                        locations.push(point);
               
        }
         $('html, body').animate({ scrollTop: $(window).height() / 1.5 }, 'slow');
        showMap();

    }



        //code to be executed when the 'search' button is clicked
    $("#search").click(function (e) {
        debugger;
        var suburb = $("#suburb").val();
        var Found = false;
         for (var item in array)
         {
             if (array[item] == suburb)
             {
                 Found = true;
                 break;

                     
             }
         }

        if (!Found)
        {
            e.preventDefault();
                 alignModal();
                 $("#exampleModalCenter").modal('show');
         }

         
            //else {
            //    $('html, body').animate({ scrollTop: $(window).height() / 1.5 }, 'slow');
            //    showMap();

            //}

         });

    function showMap() {
        const TOKEN = "pk.eyJ1Ijoic2hyaWRoYXJwYXdhciIsImEiOiJjazAyMTQ4MHUwaG52M21wNDk4a29ncTF1In0.cHtu-I1h34aPZp70n4V6iA";

        var data = [];

        for (i = 0; i < locations.length; i++) {

            var feature = {
                "type": "Feature",
                "properties": {
                    "description": locations[i].description,
                    "icon": "town-hall-15",
                    "iconSize": "[60, 60]",
                     "marker-color": "#3bb2d0",
      "marker-size": "large",

                },
                "geometry": {
                    "type": "Point",
                    "coordinates": [locations[i].longitude, locations[i].latitude]
                }
            };
            data.push(feature)
        }
        mapboxgl.accessToken = "pk.eyJ1Ijoic2hyaWRoYXJwYXdhciIsImEiOiJjazAyMTQ4MHUwaG52M21wNDk4a29ncTF1In0.cHtu-I1h34aPZp70n4V6iA";
        var map = new mapboxgl.Map({

            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v10',
            zoom: 11,
            center: [locations[0].longitude, locations[0].latitude]
        });
        map.on('load', function () {
            // Add a layer showing the places.

            map.addLayer({
                "id": "places",
                "type": "symbol",
                "source": {
                    "type": "geojson",
                    "data": {
                        "type": "FeatureCollection",
                        "features": data
                    }
                },
                "layout": {
                    "icon-image": "{icon}",
                    "icon-allow-overlap": true
                }
            });

            map.addControl(new mapboxgl.GeolocateControl({
                positionOptions: {
                    enableHighAccuracy: true
                },
                trackUserLocation: true
            }));
            map.addControl(new MapboxGeocoder({
                accessToken: mapboxgl.accessToken,
                marker: { color: 'orange' }, mapboxgl: mapboxgl
            }));;
            map.addControl(new mapboxgl.NavigationControl());
            // When a click event occurs on a feature in the places layer, open a popup at the
            // location of the feature, with description HTML from its properties.
            map.on('click', 'places', function (e) {
                var coordinates = e.features[0].geometry.coordinates.slice();
                var description = e.features[0].properties.description;
                // Ensure that if the map is zoomed out such that multiple
                // copies of the feature are visible, the popup appears
                // over the copy being pointed to.
                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                }
                new mapboxgl.Popup()
                    .setLngLat(coordinates)
                    .setHTML(description)
                    .addTo(map);
            });
            // Change the cursor to a pointer when the mouse is over the places layer.
            map.on('mouseenter', 'places', function () {
                map.getCanvas().style.cursor = 'pointer';
            });
            // Change it back to a pointer when it leaves.
            map.on('mouseleave', 'places', function () {
                map.getCanvas().style.cursor = '';
            });
        });
    }


</script>

